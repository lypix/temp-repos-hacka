@page "/survey/{token}"
@using SurveyApp.Services
@using SurveyApp.Database.Entities
@inject INPSService NPSService
@inject IOpenAIService OpenAIService
@inject NavigationManager Navigation

<PageTitle>NPS-Umfrage</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="loading-spinner"></div>
                    <p class="mt-3">Umfrage wird geladen...</p>
                </div>
            }
            else if (survey == null)
            {
                <div class="alert alert-warning text-center">
                    <h4>Umfrage nicht gefunden</h4>
                    <p>Die angeforderte Umfrage existiert nicht oder wurde bereits abgeschlossen.</p>
                </div>
            }
            else if (isCompleted)
            {
                <div class="card fade-in">
                    <div class="card-body text-center">
                        <i class="fas fa-check-circle fa-4x text-success mb-4"></i>
                        <h2>Vielen Dank für Ihr Feedback!</h2>
                        <p class="lead">Ihre Antworten wurden erfolgreich gespeichert.</p>
                        <div class="mt-4 p-3 bg-light rounded">
                            <h5>Ihr NPS-Score: <span class="badge bg-primary fs-4">@selectedScore/10</span></h5>
                        </div>
                        <p class="mt-3 text-muted">
                            Ihr Feedback hilft uns dabei, unsere Services kontinuierlich zu verbessern.
                        </p>
                    </div>
                </div>
            }
            else
            {
                <div class="card fade-in">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">
                            <i class="fas fa-clipboard-list me-2"></i>
                            Kundenzufriedenheits-Umfrage
                        </h4>
                    </div>
                    <div class="card-body">
                        <!-- Progress Bar -->
                        <div class="progress mb-4" style="height: 8px;">
                            <div class="progress-bar" role="progressbar" 
                                 style="width: @(currentStep * 50)%" 
                                 aria-valuenow="@(currentStep * 50)" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100">
                            </div>
                        </div>
                        
                        <!-- Ticket Information -->
                        <div class="alert alert-info mb-4">
                            <h6><i class="fas fa-ticket-alt me-2"></i>Abgeschlossenes Ticket</h6>
                            <strong>@survey.TicketId:</strong> @survey.TicketTitle<br>
                            <small class="text-muted">
                                Abgeschlossen am @survey.CompletedDate.ToString("dd.MM.yyyy") 
                                von @survey.AssigneeName
                            </small>
                        </div>
                        
                        @if (currentStep == 1)
                        {
                            <!-- NPS Score Selection -->
                            <div class="text-center mb-4">
                                <h5>Wie wahrscheinlich ist es, dass Sie unsere Services weiterempfehlen?</h5>
                                <p class="text-muted">Bewerten Sie auf einer Skala von 0 bis 10</p>
                            </div>
                            
                            <div class="nps-scale">
                                @for (int i = 0; i <= 10; i++)
                                {
                                    int score = i;
                                    string cssClass = GetNPSButtonClass(score);
                                    
                                    <button class="nps-button @cssClass @(selectedScore == score ? "selected" : "")"
                                            @onclick="() => SelectNPSScore(score)">
                                        @score
                                    </button>
                                }
                            </div>
                            
                            <div class="d-flex justify-content-between text-muted small mt-2">
                                <span>Gar nicht wahrscheinlich</span>
                                <span>Sehr wahrscheinlich</span>
                            </div>
                            
                            @if (selectedScore.HasValue)
                            {
                                <div class="text-center mt-4 fade-in">
                                    <div class="alert alert-light">
                                        <strong>@GetNPSLabel(selectedScore.Value)</strong> - Score: @selectedScore/10
                                    </div>
                                    
                                    @if (isGeneratingQuestions)
                                    {
                                        <div class="text-center">
                                            <div class="loading-spinner"></div>
                                            <p class="mt-2">KI generiert personalisierte Folgefragen...</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <button class="btn btn-primary btn-lg" @onclick="ProceedToQuestions">
                                            <i class="fas fa-arrow-right me-2"></i>
                                            Weiter zu den Folgefragen
                                        </button>
                                    }
                                </div>
                            }
                        }
                        else if (currentStep == 2)
                        {
                            <!-- Follow-up Questions -->
                            <div class="mb-4">
                                <h5>
                                    <i class="fas fa-robot me-2 text-success"></i>
                                    KI-generierte Folgefragen
                                </h5>
                                <div class="badge bg-primary">NPS-Score: @selectedScore/10</div>
                            </div>
                            
                            @if (followUpQuestions != null && followUpQuestions.Any())
                            {
                                @for (int i = 0; i < followUpQuestions.Count; i++)
                                {
                                    int index = i;
                                    <div class="mb-4">
                                        <label class="form-label fw-bold">
                                            Frage @(index + 1):
                                        </label>
                                        <p class="mb-2">@followUpQuestions[index]</p>
                                        <textarea class="form-control" 
                                                  rows="3" 
                                                  placeholder="Bitte teilen Sie Ihre Gedanken mit..."
                                                  @bind="answers[index]">
                                        </textarea>
                                    </div>
                                }
                                
                                <div class="d-flex justify-content-between mt-4">
                                    <button class="btn btn-outline-secondary" @onclick="GoBackToNPS">
                                        <i class="fas fa-arrow-left me-2"></i>
                                        Zurück
                                    </button>
                                    
                                    <button class="btn btn-success btn-lg" 
                                            @onclick="SubmitSurvey" 
                                            disabled="@(isSubmitting || !AllQuestionsAnswered())">
                                        @if (isSubmitting)
                                        {
                                            <div class="loading-spinner me-2"></div>
                                            <span>Wird gesendet...</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-paper-plane me-2"></i>
                                            <span>Umfrage abschließen</span>
                                        }
                                    </button>
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string Token { get; set; } = string.Empty;
    
    private Survey? survey;
    private bool isLoading = true;
    private bool isCompleted = false;
    private bool isGeneratingQuestions = false;
    private bool isSubmitting = false;
    private int currentStep = 1;
    private int? selectedScore;
    private List<string>? followUpQuestions;
    private List<string> answers = new List<string> { "", "", "" };
    
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Token))
        {
            survey = await NPSService.GetSurveyByTokenAsync(Token);
        }
        isLoading = false;
    }
    
    private void SelectNPSScore(int score)
    {
        selectedScore = score;
        StateHasChanged();
    }
    
    private string GetNPSButtonClass(int score)
    {
        if (score <= 6) return "detractor";
        if (score <= 8) return "passive";
        return "promoter";
    }
    
    private string GetNPSLabel(int score)
    {
        if (score <= 6) return "Kritiker";
        if (score <= 8) return "Indifferent";
        return "Promoter";
    }
    
    private async Task ProceedToQuestions()
    {
        if (!selectedScore.HasValue || survey == null) return;
        
        isGeneratingQuestions = true;
        StateHasChanged();
        
        try
        {
            followUpQuestions = await OpenAIService.GenerateFollowUpQuestionsAsync(
                selectedScore.Value, 
                survey.TicketTitle, 
                survey.TicketDescription);
            
            currentStep = 2;
        }
        catch (Exception ex)
        {
            // Handle error - in production, log this
            followUpQuestions = new List<string>
            {
                "Was hat bei der Umsetzung gut funktioniert?",
                "Wo sehen Sie Verbesserungspotential?",
                "Wie zufrieden waren Sie mit der Kommunikation?"
            };
            currentStep = 2;
        }
        finally
        {
            isGeneratingQuestions = false;
            StateHasChanged();
        }
    }
    
    private void GoBackToNPS()
    {
        currentStep = 1;
        StateHasChanged();
    }
    
    private bool AllQuestionsAnswered()
    {
        return answers.All(a => !string.IsNullOrWhiteSpace(a));
    }
    
    private async Task SubmitSurvey()
    {
        if (!selectedScore.HasValue || survey == null || followUpQuestions == null) return;
        
        isSubmitting = true;
        StateHasChanged();
        
        try
        {
            var responses = new List<(string question, string answer)>();
            for (int i = 0; i < Math.Min(followUpQuestions.Count, answers.Count); i++)
            {
                responses.Add((followUpQuestions[i], answers[i]));
            }
            
            var success = await NPSService.SubmitNPSResponseAsync(Token, selectedScore.Value, responses);
            
            if (success)
            {
                isCompleted = true;
            }
            else
            {
                // Handle error
                Console.WriteLine("Failed to submit survey");
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error submitting survey: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}